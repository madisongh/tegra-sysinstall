#!/bin/bash
# Common functions for tegra installer scripts
# Copyright (c) 2019-2020, Matthew Madison

declare -A EMMC_PARTITIONS CRYPT_PARTITIONS MKFS_ARGS PARTINDEX

PARTITIONS_TO_FORMAT=(DATA EXTRA LOGS UDA)
MKFS_ARGS[DATA]="-i 4096"
MKFS_ARGS[UDA]="-i 4096"

ROOTFSLABEL=(APP APP_b)
ROOTFSDEVTYPE="mmcblk"
UBOOT_ROOTFSDEVTYPE="mmc"
ROOTFSDEVNUM=0
ROOTFSDEV[0]="$ROOTFSDEVTYPE$ROOTFSDEVNUM"
ROOTFSDEV[1]="$ROOTFSDEVTYPE$ROOTFSDEVNUM"
UBOOT_ROOTFSDEVNUM="0"
ROOTFSPART[0]="p1"
UBOOT_ROOTFSPART[0]="1"
ROOTFSPART[1]="p2"
UBOOT_ROOTFSPART[1]="2"
DATADEV="$ROOTFSDEVTYPE$ROOTFSDEVNUM"
rootfs_on_installer_partition=
saved_machine_id=

# identify_platform_setup
#
# Initializes storage-related variables.
#
identify_platform_setup() {
    local MOUNTPOINT NAME PKNAME PARTLABEL TYPE
    local diskdev_candidate
    local -a ARGS
    local found_rootfs
    local curslot=$(tegra-boot-control --current-slot 2>/dev/null)
    local rootfsdev="$ROOTFSDEVTYPE$ROOTFSDEVNUM"
    DATAPART="TBD"
    DISKDEV=
    DISKPART=1
    INSTALLTO=
    EMMC_PARTITIONS=()
    CRYPT_PARTITIONS=()
    PARTINDEX=()

    while read -a ARGS; do
	eval ${ARGS[@]}
	if [ "${TYPE:0:5}" = "crypt" ]; then
	    EMMC_PARTITIONS[$NAME]="mapper/$NAME"
	    CRYPT_PARTITIONS[$NAME]="mapper/$NAME"
	    case "$NAME" in
		APP)
		    ROOTFSDEV[0]="mapper/"
		    ROOTFSPART[0]="$NAME"
		    ;;
		APP_b)
		    ROOTFSDEV[1]="mapper/"
		    ROOTFSPART[1]="$NAME"
		    ;;
		DATA)
		    # Use EXTRA if it is present
		    if [ "$DATAPART" = "TBD" ]; then
			DATADEV="mapper/"
			DATAPART="$NAME"
		    fi
		    ;;
		EXTRA)
		    DATADEV="mapper/"
		    DATAPART="$NAME"
		    ;;
	    esac
	    continue
	fi
	if [ "$MOUNTPOINT" = "/" ]; then
	    if [ "$PARTLABEL" = "INSTALLER" ]; then
		rootfs_on_installer_partition="yes"
	    fi
	    found_rootfs=yes
	fi
	if [ "$PKNAME" = "$rootfsdev" -a -n "$PARTLABEL" ]; then
	    local ptnfile="/sys/block/$PKNAME/$NAME/partition"
	    EMMC_PARTITIONS[$PARTLABEL]="$NAME"
	    if [ ! -e "$ptnfile" ]; then
		echo "ERR: cannot identify partition number for $NAME" >&2
		exit 1
	    fi
	    PARTINDEX[$PARTLABEL]=`cat $ptnfile`
	    if [ "$PARTLABEL" = "APP" ]; then
		ROOTFSPART[0]="${NAME#${PKNAME}}"
	    elif [ "$PARTLABEL" = "APP_b" ]; then
		ROOTFSPART[1]="${NAME#${PKNAME}}"
	    elif [ "$PARTLABEL" = "EXTRA" ]; then
		DATAPART="${NAME#${PKNAME}}"
	    elif [ "$PARTLABEL" = "UDA" -o "$PARTLABEL" = "DATA" -a "$DATAPART" = "TBD" ]; then
		DATAPART="${NAME#${PKNAME}}"
	    elif [ "$PARTLABEL" = "INSTALLER" ]; then
		INITIAL_SETUP=yes
	    fi
	fi
    done < <(lsblk -P -o MOUNTPOINT,NAME,PKNAME,PARTLABEL,TYPE)

    if [ "$INITIAL_SETUP" != "yes" -a -z "$found_rootfs" ]; then
	[ -e "/run/bootdev/rootfs-device" ] || INITIAL_SETUP=yes
    fi

    if [ "$INITIAL_SETUP" = "yes" ]; then
	INSTALLTO="0 1"
    elif [ "$curslot" != "0" -a "$curslot" != "1" ]; then
	echo "ERR: could not identify installation partition" >&2
	exit 1
    else
	INSTALLTO=$(expr 1 - $curslot)
    fi

    if [ "$DATAPART" = "TBD" -a "$INITIAL_SETUP" != "yes" ]; then
	echo "ERR: no DATA partition found" >&2
	exit 1
    fi
}

identify_platform_setup

# save_machine_id
#
#  Checks the Mender variable in U-Boot first; if not found,
#  checks the tegra-bootinfo variables; if still not found,
#  extracts from /etc/machine-id on the APP partition rootfs,
#  if present.
#
save_machine_id() {
    saved_machine_id=$(fw_printenv -n mender_systemd_machine_id 2>/dev/null)
    [ -n "$saved_machine_id" ] || saved_machine_id=$(tegra-bootinfo -n -v machine_id 2>/dev/null)
    if [ -z "$saved_machine_id" -a -n "${EMMC_PARTITIONS[APP]}" ]; then
	local tmpmnt=$(mktemp -q -d /tmp/saveid.XXXXXX)
	if mount "/dev/${EMMC_PARTITIONS[APP]}" "$tmpmnt" > /dev/null 2>&1; then
	    if [ -f "$tmpmnt/etc/machine-id" ]; then
		saved_machine_id=$(cat "$tmpmnt/etc/machine-id" 2>/dev/null)
	    fi
	    umount "$tmpmnt"
	fi
	rmdir "$tmpmnt"
    fi
}

# set_machine_id_var
#
# Sets Mender variable in U-boot and/or tegra-bootinfo variable
# for with the machine ID passed in, or the saved machine ID.
set_machine_id_var() {
    local machid="${1:-$saved_machine_id}"
    local path tbinfo fw_setenv

    [ -n "$machid" ] || return 0

    for path in bin sbin usr/bin usr/sbin; do
	if [ -e "$1$path/fw_setenv" ]; then
	    fw_setenv="$path/fw_setenv"
	    break
	fi
    done
    if [ -n "$fw_setenv" ] && chroot $1 "$fw_setenv" mender_systemd_machine_id "$machid"; then
	echo "Saved machine ID to U-Boot environment"
    fi
    for path in bin sbin usr/bin usr/sbin; do
	if [ -e "$1$path/tegra-bootinfo" ]; then
	    tbinfo="$path/tegra-bootinfo"
	    break
	fi
    done
    if [ -n "$tbinfo" ] && chroot $1 "$tbinfo" -V machine_id "$machid"; then
	echo "Saved machine ID to tegra-bootinfo variables"
    fi
    return 0
}

# copy_file <filename> <dest-dir> [var]
#
# Copies the <filename> to <dest-dir>.
# If <var> is specifed, that variable is set to the
# full pathname of <filename>.
#
copy_file() {
    local fullpath=`readlink -f "$1"`
    if [ -z "$fullpath" -o ! -e "$fullpath" ]; then
        echo "ERR: file not found: $1" >&2
        return 1
    fi
    local destdir=`readlink -f "$2"`
    if [ `dirname "$fullpath"` = "$destdir" ]; then
        echo "ERR: file to be copied already resides in the target directory" >&2
        return 1
    fi
    if cp "$fullpath" "$2"/; then
        if [ -n "$3" ]; then
            eval $3="\"$fullpath\""
        fi
    else
        echo "ERR: failed to copy file" >&2
        return 1
    fi
    return 0
}

# download_file <file-or-url> <download-dir> <filenamevar>
#
#  For non-file:// URLs, uses curl to download the file at
#  the named URL to <download-dir>.  For files (bare pathnames
#  or file:// URLs), makes a copy in <download-dir> of the
#  named file.  The variable in <filenamevar> is set to the
#  basename of the file created.
#
#  Called from fetch_package.
#
download_file() {
    local file_or_url="$1"
    local dl_dir="$2"
    local filenamevar="$3"
    local filename
    local scheme=`echo "$file_or_url" | sed -re's,^\s*([^:]+:).*,\1,'`

    if [ -n "$scheme" -a "${scheme: -1}" = ":" -a "$scheme" != "file:" ]; then
        local curdir="$PWD"
        cd "$dl_dir"
        if ! curl --tftp-blksize 1400 -f -O "$file_or_url"; then
            cd "$curdir"
            return 1
        fi
        cd "$curdir"
        filename=`basename "$file_or_url"`
    else
        if [ "$scheme" = "file:" ]; then
            file_or_url=`echo "$file_or_url" | sed -re's,^\s*[^:]+:(.*),\1,'`
        fi
        if ! copy_file "$file_or_url" "$dl_dir" filename; then
            return 1
        fi
        filename=`basename "$filename"`
    fi
    eval $filenamevar="\"$filename\""
    return 0
}

# resize_gpt
#
# Adjust the GPT to hold the standard number
# of entries, when it's the standard length
# (33 sectors).
#
resize_gpt() {
    local rootfsdev="$1"
    local npvar="$2"
    local ptsize=`sgdisk $rootfsdev --print | grep '^Partition table holds' | cut -d' ' -f6`

    ptsize=$(expr $ptsize + 0 2>/dev/null)
    if [ -n "$ptsize" ]; then
	if [ $ptsize -lt 128 ]; then
	    local firstsect=`sgdisk $rootfsdev --print | grep '^First usable sector' | sed -e's!.*sector is \([0-9]*\),.*$!\1!'`
	    if [ -n "$firstsect" ]; then
		if [ $firstsect -ge 34 -a $firstsect -le 40 ] ; then
		    echo -n "Resizing GPT..."
		    if ! sgdisk $rootfsdev --resize-table=128 >/dev/null 2>&1; then
			echo "ERR: could not resize GPT" >&2
			return 1
		    fi
		    echo "[OK]"
		    eval $npvar="yes"
		else
		    echo "Skipping GPT resizing: PPTSIZE at flash time was not 16896"
		fi
	    else
		echo "WARN: could not determine first usable sector" >&2
	    fi
	fi
    else
	echo "ERR: could not determine partition table size" >&2
	return 1
    fi
    return 0
}

# package_preinstall
#
# Preinstallation checks.
#
package_preinstall() {
    local rootfsdev="/dev/$ROOTFSDEVTYPE$ROOTFSDEVNUM"

    # Don't need this during sysinstall
    [ "$INITIAL_SETUP" != "yes" ] || return 0

    local needprobe
    #
    # Delete the extra partition created at flash time.
    #
    if [ -n "${EMMC_PARTITIONS[unused]}" ]; then
	if ! sgdisk $rootfsdev --delete=${PARTINDEX[unused]} >/dev/null 2>&1; then
	    echo "ERR: could not delete 'unused' partition" >&2
	    return 1
	fi
	needprobe="yes"
    fi
    resize_gpt "$rootfsdev" needprobe || return 1

    if [ "$needprobe" = "yes" ]; then
	reprobe_rootfsdev
	identify_platform_setup || return 1
    fi
    return 0
}

# install_rootfs <targetdev> <index> <tarballname>
#
# Installs a rootfs from a tarball.
#
install_rootfs() {
    local targetdev="$1"
    local mptemp=`mktemp -q -d /tmp/inst-rootfs.XXXXXX`
    local which=$2
    local tarball="$3"
    local rc=0
    local lblarg
    local i
    test -b $targetdev || return 1
    if [ -n "${ROOTFSLABEL[$which]}" ]; then
	lblarg="-L ${ROOTFSLABEL[$which]}"
    fi
    mkfs.ext4 -q -F -i 4096 $lblarg $targetdev >/dev/null || return 1
    mount $targetdev $mptemp || return 1
    if ! tar -C $mptemp --xattrs --xattrs-include="*" --warning=no-timestamp -x -f "$tarball"; then
        echo "ERR: rootfs installation failed" >&2
        rc=1
    fi
    # Overwrite /etc/timestamp with actual install time
    if [ -e ${rmount}/etc/timestamp ]; then
        /bin/date -u "+%4Y%2m%2d%2H%2M%2S" > $mptemp/etc/timestamp
    fi
    sync
    if [ -z "$INSTALLED_ARTIFACT" ]; then
	if [ -e $mptemp/etc/mender/artifact_info ]; then
	    INSTALLED_ARTIFACT=`cut -d= -f2 $mptemp/etc/mender/artifact_info`
	else
	    INSTALLED_ARTIFACT=$(. $mptemp/etc/os-release 2>/dev/null; echo $PRETTY_NAME)
	fi
    fi
    for i in 1 2 3; do
	if umount $mptemp 2>/dev/null; then
	    rmdir $mptemp
	    break
	fi
	sleep 1
    done
    return $rc
}


# update_datapart <mountpoint> <tarfile>
#
# Updates the /data partition from a tarball, using
# the (GNU tar-specific) --keep-newer-files option.
#
update_datapart() {
    local datamount="${1:-/data}"
    local dataskel="${2}"
    tar -C "$datamount" --keep-newer-files --warning=no-timestamp --xattrs --xattrs-include="*" -x -f "$dataskel" 2>/dev/null
}

# partition_available <devname>
#
# Checks to see if the <devname> partition is not
# mounted.  Only looks at ext3/ext4 partitions.
#
partition_available() {
    local target=$1
    local MOUNTPOINT FSTYPE

    if [ ! -b $target ]; then
        echo "ERR: not a partition: $target" >&2
        return 1
    fi
    eval `lsblk -o MOUNTPOINT,FSTYPE -P ${target}`
    if [ "$FSTYPE" = "ext3" -o "$FSTYPE" = "ext4" ]; then
	if  [ -n "$MOUNTPOINT" ]; then
	    return 1
	fi
    fi
    return 0
}

# repartition_gpt_device <device> <partition-config-file>
#
# Re-partitions a GPT disk
repartition_gpt_device() {
    local pftmp=`mktemp -q`
    local name size type guid file startpos partnum typearg guidarg
    if [ ! -b "$1" ]; then
	echo "ERR: $1 is not a block device" >&2
	return 1
    fi
    echo -n "Re-partitioning device $1..."
    if ! sgdisk "$1" -a @PARTALIGN@ --disk-guid=R --zap-all >/dev/null 2>&1; then
	echo " [FAIL]"
	echo "ERR: could not zap partition table on $1" >&2
	return 1
    fi
    egrep -v '^[[:space:]]*#' "$2" >$pftmp
    local sgdiskargs="-a @PARTALIGN@"
    while IFS=, read partnum name size type guid file startpos; do
	if [ -z "partnum" -o -z "$name" -o -z "$size" ]; then
	    continue
	fi
	if [ -z "$startpos" ]; then
	    startpos=0
	fi
	if [ -n "$type" ]; then
	    typearg="--typecode=$partnum:$type"
	else
	    typearg="--typecode=$partnum:0700"
	fi
	if [ -n "$guid" ]; then
	    guidarg="--partition-guid=$partnum:$guid"
	else
	    guidarg="--partition-guid=$partnum:R"
	fi
	if [ "$size" = "REMAIN" ]; then
	    sgdiskargs="${sgdiskargs} --largest-new=$partnum $typearg $guidarg -c $partnum:$name"
	else
	    sgdiskargs="${sgdiskargs} --new=$partnum:$startpos:+$size $typearg $guidarg -c $partnum:$name"
	fi
    done < "$pftmp"
    rm -f "$pftmp"
    local sgdisklog=$(mktemp -q)
    if ! sgdisk "$1" $sgdiskargs  >"$sgdisklog" 2>&1; then
	echo " [FAIL]"
	cat "$sgdisklog" >&2
	rm -f "$sgdisklog"
	return 1
    fi
    rm -f "$sgdisklog"
    echo " [OK]"

    if ! sgdisk "$1" --verify >/dev/null 2>&1; then
	echo "ERR: partition table verification failed for $1" >&2
	return 1
    fi
    sleep 1
    sgdisk "$1" --print
    return 0
}

# encrypt_one_partition
#
# Called on by create_luks_partitions in a subprocess
# so we can parallelize the partition encryption steps.
#
encrypt_one_partition() {
    local ppdir="$1"
    local luksdev="$2"
    local name="$3"
    local realname="$4"
    echo "Encrypting $luksdev($name)..."
    if ! cat "$ppdir/passphrase" | cryptsetup --type luks --cipher aes-xts-plain64 --hash sha256 \
					      --use-random --key-file - luksFormat $luksdev >/dev/null 2>&1; then
	echo "[FAIL $luksdev($name)]"
	return 1
    fi
    # now 'open' it
    if ! cryptsetup luksOpen --key-file "$ppdir/passphrase" $luksdev $realname 2>/dev/null; then
	echo "[$luksdev($name) FAIL]"
	return 1
    fi
    echo "[$luksdev($name) OK]"
    return 0
}

# create_luks_partitions
#
# Creates encrypted containers on any partitions whose labels are
# prefixed with 'crypt-'.  The name after the prefix is used as
# the device name under /dev/mapper, and should correspond to
# the partition label that would be used in the non-encrypted case.
create_luks_partitions() {
    local ppdir="$1"
    local pftmp=`mktemp -q`
    local name size type guid file startpos realname luksdev
    grep -v '^[[:space:]]*#' "$2" >$pftmp
    local pids=
    while IFS=, read name size type guid file startpos; do
	[ "${name:0:6}" = "crypt-" ] || continue
	realname="${name:6}"
	[ ! -b /dev/mapper/$realname ] || cryptsetup luksClose /dev/mapper/$realname
	luksdev=`blkid -t PARTLABEL=$name | awk -F: '{print $1}'`
	[ -n "$realname" -a -n "$luksdev" -a -b "$luksdev" ] || continue
	encrypt_one_partition "$ppdir" "$luksdev" "$name" "$realname" &
	pids="$pids $!"
    done < "$pftmp"
    wait $pids || return 1
    return 0
}

# reprobe_rootfsdev
reprobe_rootfsdev() {
    if ! partprobe /dev/$ROOTFSDEVTYPE$ROOTFSDEVNUM >/dev/null 2>&1; then
	sleep 1
	partprobe /dev/$ROOTFSDEVTYPE$ROOTFSDEVNUM >/dev/null 2>&1
    fi
    sleep 1
    blkid -p -s none /dev/$ROOTFSDEVTYPE$ROOTFSDEVNUM >/dev/null 2>&1
    sleep 1
}

# secure_boot_enabled
#
# returns 0 (success) if unit is secured,
# returns 1 (fail) if not secured
secure_boot_enabled() {
    local odm_production_mode=$(cat /sys/devices/platform/tegra-fuse/odm_production_mode)
    [ -n "$odm_production_mode" -a $(($odm_production_mode)) -ne 0 ] || return 1
    # I have some Nanos that got bit by the NVIDIA fuse burning bug that locked
    # them down with PKC disabled, handle that:
    if [ -e /sys/devices/platform/tegra-fuse/pkc_disable ]; then
	local pkc_disable=$(cat /sys/devices/platform/tegra-fuse/pkc_disable)
	[ $(($pkc_disable)) -eq 0 ] || return 1
    fi
    return 0
}

# update_bootloader [rootfs-mountpoint]
#
# Uses tegra-bootloader-update for all updates.
#
update_bootloader() {
    local updlog=`mktemp /tmp/bup.log.XXXXXX`
    local fs rc
    local mounts=(/dev /sys /run)
    local options

    rc=0
    mount -t proc proc "$1/proc"
    for fs in ${mounts[@]}; do
	mount --bind $fs "$1$fs"
    done
    if [ "$INITIAL_SETUP" = "yes" ]; then
        options="--initialize"
	chroot "$1" /usr/bin/tegra-bootloader-update --needs-repartition
	rc=$?
	# needs-repartition check returns 0=yes, 1=no, 2=error
	if [ $rc -eq 1 ]; then
	    echo "Boot device does not need repartitioning"
	    rc=0
	elif [ $rc -eq 0 ]; then
	    echo -n "Clearing boot device"
	    if [ -b "/dev/mtdblock0" ]; then
		flash_erase /dev/mtd0 0 0 || rc=1
	    else
		if [ -b "/dev/mmcblk0boot0" ]; then
		    echo -n " /dev/mmcblk0boot0..."
		    echo "0" > /sys/block/mmcblk0boot0/force_ro
		    dd if=/dev/zero of=/dev/mmcblk0boot0 bs=8192 count=512 >/dev/null 2>&1 || rc=1
		fi
		if [ -b "/dev/mmcblk0boot1" ]; then
		    echo -n " /dev/mmcblk0boot1..."
		    echo "0" > /sys/block/mmcblk0boot1/force_ro
		    dd if=/dev/zero of=/dev/mmcblk0boot0 bs=8192 count=512 >/dev/null 2>&1 || rc=1
		fi
		[ $rc -eq 0 ] && echo " [OK]" || echo " [FAIL]"
	    fi
	else
	    echo "ERR: failed boot device repartitioning check" >&2
	fi
    fi
    if [ $rc -eq 0 ]; then
	local payload="bl_update_payload"
	if [ "$INITIAL_SETUP" = "yes" -a -e "$1/opt/ota_package/full_init_payload" ]; then
	    payload="full_init_payload"
	fi
	if ! chroot "$1" /usr/bin/tegra-bootloader-update $options /opt/ota_package/$payload 2>&1 ; then
	    echo "ERR: bootloader update failed" >&2
	    rc=1
	fi
    fi

    if [ $rc -eq 0 -a "$INITIAL_SETUP" = "yes" ]; then
	# This happens here because storage for boot variables
	# is likely to be in the boot device, which may have been wiped
	if type tegra-bootinfo 2>&1 >/dev/null; then
	    echo -n "Initializing bootinfo area..."
	    if tegra-bootinfo --initialize --force-initialize; then
		echo " [OK]"
	    else
		echo " [FAIL]"
		rc=1
	    fi
	fi
	if [ $rc -eq 0 ] && ! secure_boot_enabled; then
	    set_machine_id_var "$1" || rc=1
	fi
    fi

    for fs in ${mounts[@]}; do
	umount "$1$fs"
    done
    umount "$1/proc"

    return $rc
}

###
# verify_device_availability
#
verify_device_availability() {
    if [ -z "$INSTALLTO" ]; then
	echo "ERR: could not identify rootfs partition(s) to install to" >&2
	return 1
    fi
    return 0
}

# make_fake_parttable
#
# Extract a fake 'partition_table' file from the GPT for
# use by create_luks_partitions. Since that function only
# really needs the partition name, some of the fields
# are omitted (notably the partition type code and start
# fields).
#
# Returns: 0 (success) if crypt-XXXXX partition(s) found
#          non-0 (fail) otherwise
make_fake_parttable() {
    local ptfile="$1"
    local NAME PARTLABEL SIZE PARTUUID
    local -a ARGS
    local foundcrypt sizeinblks

    rm -f $ptfile
    touch $ptfile
    while read -a ARGS; do
	eval ${ARGS[@]}
	[ "${PARTLABEL:0:6}" != "crypt-" ] || foundcrypt="yes"
	sizeinblks=`expr $SIZE / 512`
	echo "$PARTLABEL,$sizeinblks,,$PARTUUID,," >> $ptfile
    done < <(lsblk -P -b -o NAME,PARTLABEL,SIZE,PARTUUID)
    [ "$foundcrypt" = "yes" ]
}

# initialize_devices
#
# Reformat the eMMC (or SDcard) with a partition table that
# is generated from the flash layout XML file.
#
# IMPORTANT: on some of the Jetson devices, you must specify
# 16896 (or larger) as the size of the primary GPT in your flash layout
# in order for the NVIDIA bootloaders to be compatible with
# the full-size GPT created by the Linux-based tools. Otherwise,
# the target will be unbootable.
#
initialize_devices() {
    local rootfsdev="/dev/$ROOTFSDEVTYPE$ROOTFSDEVNUM"
    local part needprobe

    if [ "$INITIAL_SETUP" = "yes" ]; then
	if [ "$DATAPART" != "TBD" -a -z "$DATA_URL"]; then
		local partdev="/dev/$DATADEV$DATAPART"
		local datatmp=$(mktemp -q -d /tmp/datasave.XXXXXX)
		if mount $partdev $datatmp >/dev/null 2>&1; then
		echo -n "Saving data partition contents..."
		if ! tar -C "$datatmp" --xattrs --xattrs-include="*" -c -z -f /tmp/${part}.tar.gz . 2>/dev/null; then
			echo "[FAILED]"
			umount "$datatmp"
			rm -f /tmp/${part}.tar.gz
			return 1
		else
			echo "[OK]"
			umount "$datatmp"
		fi
			rmdir "$datatmp"
		fi
	fi

	save_machine_id

	if [ -s "@datadir@/tegra-sysinstall/partition_table" ]; then
	    echo "Re-partitioning the eMMC..."
	    repartition_gpt_device /dev/$ROOTFSDEVTYPE$ROOTFSDEVNUM "@datadir@/tegra-sysinstall/partition_table" || return 1
	    needprobe="yes"
	else
	    #
	    # Delete the extra partition created at flash time.
	    #
	    if [ -n "${EMMC_PARTITIONS[unused]}" ]; then
		echo -n "Removing unused partition..."
		if ! sgdisk $rootfsdev --delete=${PARTINDEX[unused]} >/dev/null 2>&1; then
		    echo "[FAIL]"
		    echo "ERR: could not delete 'unused' partition" >&2
		    return 1
		fi
		needprobe="yes"
		echo "[OK]"
	    fi
	    resize_gpt "$rootfsdev" needprobe || return 1
	fi

	if [ "$needprobe" = "yes" ]; then
	    reprobe_rootfsdev
	    identify_platform_setup || return 1
	    needprobe=
	fi
    fi

    if ! secure_boot_enabled; then
	echo "NOTE: secure boot not enabled, skipping partition encryption"
	return 0
    fi

    # In case the flash layout doesn't name these with the 'crypt-' prefix
    for part in APP APP_b DATA; do
	if [ -z "${CRYPT_PARTITIONS[$part]}" -a -z "${EMMC_PARTITIONS[crypt-$part]}" ]; then
	    echo -n "Renaming $part to crypt-$part..."
	    if sgdisk $rootfsdev --change-name=${PARTINDEX[$part]}:crypt-$part >/dev/null 2>&1; then
		echo "[OK]"
		needprobe="yes"
	    else
		echo "[FAIL]"
		return 1
	    fi
	fi
    done

    if [ "$needprobe" = "yes" ]; then
	reprobe_rootfsdev
	identify_platform_setup || return 1
	needprobe=
    fi

    local fakept=`mktemp -q`
    if make_fake_parttable $fakept; then
	local ppdir=`mktemp -q -d /run/setup-pp.XXXXXX`
	@KEY_RETRIEVAL_CMD@ > $ppdir/passphrase
	if ! create_luks_partitions $ppdir $fakept; then
	    rm -rf $ppdir
	    return 1
	fi
	rm -rf "$ppdir"
	reprobe_rootfsdev
	identify_platform_setup || return 1
    fi
    return 0
}

# format_partitions
#
# Partitions listed in PARTITIONS_TO_FORMAT get formatted
# using ext4 filesystem with the options set in MKFS_ARGS[<partname>].
# Partitions are restored from original contents
# if this is a re-partition operation (saved by initialize_devices).
format_partitions() {
    local tmpmnt=$(mktemp -q -d /tmp/prestore.XXXXXX)
    local part
    for part in ${PARTITIONS_TO_FORMAT[@]}; do
	local partdev="/dev/${EMMC_PARTITIONS[$part]}"
	if [ -n "$partdev" -a -b "$partdev" ]; then
	    echo -n "$part (${partdev}): formatting (${MKFS_ARGS[$part]})..."
	    if ! mkfs.ext4 -q -L $part ${MKFS_ARGS[$part]} $partdev >/dev/null; then
		echo "[FAILED]"
		return 1
	    fi
	    if [ -f "/tmp/${part}.tar.gz" ]; then
		echo -n " restoring..."
		mount "$partdev" "$tmpmnt"
		if ! tar --keep-newer-files --xattrs --xattrs-include="*" -x -f "/tmp/${part}.tar.gz" -C "$tmpmnt" 2>/dev/null; then
		    umount "$tmpmnt"
		    echo "[FAILED]"
		    return 1
		fi
		umount "$tmpmnt"
	    fi
	    echo "[OK]"
	fi
    done
    rmdir "$tmpmnt" 2>/dev/null || true
    return 0
}

# mount_storage_partitions
#
# * partition where installer files are stored
# * /data partition (if installer files are stored on different partition)
#
mount_storage_partitions() {
    mount /dev/$DATADEV$DATAPART $INSTDIRTOP || return 1
    if [ "$INSTDIRTOP" != "/data" -a -d /data ]; then
	local datapart="${EMMC_PARTITIONS[DATA]}"
	[ -n "$datapart" ] || datapart="${EMMC_PARTITIONS[UDA]}"
	if [ -n "$datapart" ]; then
	    mount /dev/$datapart /data || return 1
	fi
    fi
    return 0
}

# unmount_storage_partitions
#
unmount_storage_partitions() {
    umount $INSTDIRTOP 2>/dev/null
    if [ "$INSTDIRTOP" != "/data" ] && mountpoint -q /data; then
	umount /data 2>/dev/null
    fi
    return 0
}

# remove_installer_partition
#
remove_installer_partition() {
    local rootfsdev="/dev/$ROOTFSDEVTYPE$ROOTFSDEVNUM"
    local extramsg
    if [ -z "${EMMC_PARTITIONS[INSTALLER]}" ]; then
	return 0
    fi
    if [ "$rootfs_on_installer_partition" = "yes" ]; then
	extramsg=" and rebooting"
    fi
    echo "Removing INSTALLER partition${extramsg}..."
    if ! sgdisk $rootfsdev --delete=${PARTINDEX[INSTALLER]} >/dev/null 2>&1; then
	echo "ERR: could not delete INSTALLER partition" >&2
	return 0
    fi
    # Use reboot -f since we've just blown away our running rootfs
    [ "$rootfs_on_installer_partition" != "yes" ] || reboot -f
}

# program_machine_id
#
program_machine_id() {
    if ! secure_boot_enabled || tegra-fuse-tool -m >/dev/null 2>&1; then
	return 0
    fi

    local machid="$saved_machine_id"
    if [ -z "$machid" ]; then
	local midtmp=`mktemp -q -d /tmp/machid.XXXXXX`
	mkdir "$midtmp/etc"
	if ! systemd-machine-id-setup --root="$midtmp" > /dev/null 2>&1; then
	    echo "ERR: could not generate machine ID" >&2
	    rm -rf "$midtmp"
	    return 1
	fi
	machid=`cat "$midtmp/etc/machine-id"`
	rm -rf "$midtmp"
    fi

    if ! tegra-fuse-tool -M "$machid"; then
	echo "ERR: could not program machine ID into fuses" >&2
	return 1
    fi
    local cmpid=`tegra-fuse-tool -m 2>/dev/null`
    if [ "${cmpid^^}" != "${machid^^}" ]; then
	echo "ERR: fuse mismatch with generated machine ID" >&2
	return 1
    fi
    echo "Machine ID programmed: $cmpid"
    return 0
}

# set_url
#
# Validate a URL for accessibility
#
set_url() {
    local varname="$1"
    local value="$2"
    local default="$3"
    local disposition="${4:-required}"
    local rc=0

    eval $varname=""

    if [ -z "$value" ]; then
	if [ -n "$default" ]; then
	    value="$default"
	else
	    if [ "$dispostion" = "required" ]; then
		echo "ERR: missing required parameter $varname" >&2
		return 1
	    fi
	fi
    fi
    [ -n "$value" ] || return 0

    if [ "${value:0:7}" = "file://" ]; then
	value="${value:7}"
    fi
    if ! echo "$value" | grep -q "://"; then
	if [ ! -e "$value" ]; then
	    rc=1
	fi
    elif ! curl --output /dev/null --silent --fail -r 0-0 "$value"; then
	rc=$?
    fi
    if [ $rc -ne 0 ]; then
	if [ "$disposition" = "required" ]; then
	    echo "$value: invalid or not found" >&2
	    return 1
	fi
	value=
    fi
    eval $varname="$value"
    return 0
}

# copy_installer_files
#
# Helper for a tegraflash package that includes the
# installer in an initramfs and has the tarballs
# loaded into the APP/crypt-APP partition.
#
# Only called on if the rootfs tarball URL begins
# with 'file:///installer' and the '/installer'
# directory is present in the current rootfs.
#
copy_installer_files() {
    local appartname="APP"
    local rc=0
    if [ -z "${EMMC_PARTITIONS[APP]}" -a -n "${EMMC_PARTITIONS[crypt-APP]}" ]; then
	appartname="crypt-APP"
    fi
    local tmpmnt=$(mktemp -q -d /tmp/instcopy.XXXXXX)
    if mount /dev/disk/by-partlabel/$appartname $tmpmnt > /dev/null 2>&1; then
	if [ -d "$tmpmnt/installer" ]; then
	    cp -v "$tmpmnt/installer/"* /installer/ || rc=1
	else
	    echo "No /installer directory on $appartname partition" >&2
	fi
	umount "$tmpmnt"
    else
	echo "No APP partition found for pre-loading installer files" >&2
    fi
    rmdir "$tmpmnt" || rc=1
    return $rc
}
