#!/bin/bash
# tegra-sysinstall: system installer
#
# SYNOPSIS
#	tegra-sysinstall <rootfs-tarball-url> [<data-tarball-url>]
#
# Copyright (c) 2019, 2020 Matthew Madison

BOOTLOADER_UPDATES_SUPPORTED=yes
if [ -d "/var/extra" ]; then
    INSTDIRTOP="/var/extra"
    INSTPART=EXTRA
elif [ -d "/data" ]; then
    INSTDIRTOP="/data"
    INSTPART=DATA
else
    echo "ERR: no /var/extra or /data directory found" >&2
    exit 1
fi

. @datadir@/tegra-sysinstall/tools-common

cleanup_and_exit() {
    if [ -n "$INSTDIR" -a -d "$INSTDIR" ]; then
	rm -rf "$INSTDIR"
    fi
    [ "$INITIAL_SETUP" != "yes" ] || unmount_storage_partitions
    [ -z "$1" ] || exit $1
}

usage() {
    cat <<EOF
Usage: `basename "$0"` [OPTION]... [ROOTFS-URI] [DATA-URI]
Set up filesystems and install a production OS.

Parameters:
  ROOTFS-URI        location of rootfs tarball
                    (default: /installer/image.tar.gz)
  DATA-URI          location of data partition tarball
                    (default: /installer/data.tar.gz, optional)

Options:
  -h, --help        displays this usage information

EOF
}

ARGS=$(getopt -n $(basename "$0") -l "help" -o "h" -- "$@")
if [ $? -ne 0 ]; then
    echo "Error parsing command line" >&2
    exit 1
fi
eval set -- "$ARGS"

while true; do
    case "$1" in
	--help|-h)
	    usage
	    exit 0
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    echo "Error processing command line" >&2
	    usage
	    exit 1
	    ;;
    esac
done

set_url URL "$1" "file:///installer/image.tar.gz" || exit 1
set_url DATA_URL "$2" "file:///installer/data.tar.gz" optional || exit 1

verify_device_availability || exit 1

if [ "$INITIAL_SETUP" = "yes" ]; then
    initialize_devices || exit 1
    format_partitions || exit 1
    mount_storage_partitions || exit 1
    program_machine_id || exit 1
fi

# From here down, make sure we clean up before exiting.

INSTDIR=$(mktemp -q -d "$INSTDIRTOP/fwsetup.XXXXXX")
download_file "$URL" "$INSTDIR" ROOTFS_TARBALL || cleanup_and_exit 1
if [ -n "$DATA_URL" ]; then
    download_file "$DATA_URL" "$INSTDIR" DATA_TARBALL || cleanup_and_exit 1
else
    DATA_TARBALL=
fi

package_preinstall || cleanup_and_exit 1

if [ -n "$DATA_TARBALL" ]; then
    echo "Populating /data from $DATA_TARBALL..."
    update_datapart /data "$INSTDIR/$DATA_TARBALL" || cleanup_and_exit 1
fi

INSTALLED_ARTIFACT=
first_targetdev=
for i in $INSTALLTO; do
    targetdev="/dev/${ROOTFSDEV[$i]}${ROOTFSPART[$i]}"
    echo "Installing rootfs to $targetdev..."
    install_rootfs "$targetdev" $i $INSTDIR/$ROOTFS_TARBALL || cleanup_and_exit 1
    install_machine_id "$targetdev" || cleanup_and_exit 1
    sync && e2fsck -p "$targetdev" || cleanup_and_exit 1
    [ -n "$first_targetdev" ] || first_targetdev="$targetdev"
done

if [ "$BOOTLOADER_UPDATES_SUPPORTED" = "yes" -a -n "$first_targetdev" ]; then
    rmount=$(mktemp -q -d /tmp/finalstaging.root.XXXXXX)
    if ! mount "$first_targetdev" "$rmount" 2>/dev/null; then
	echo "ERR: could not mount rootfs for post-install operations" >&2
	cleanup_and_exit 1
    fi
    if [ -e $rmount/opt/ota_package/bl_update_payload ]; then
	bootloadertext="${BOOTLOADER_NAME:-bootloader}"
	echo "Updating $bootloadertext..."
	update_bootloader $rmount || cleanup_and_exit 1
    fi
    umount $rmount
fi

if [ -n "$INSTALLED_ARTIFACT" ]; then
    echo "PASS: successful installation of $INSTALLED_ARTIFACT"
else
    echo "PASS: successful installation"
fi

cleanup_and_exit
[ "$INITIAL_SETUP" != "yes" ] || remove_installer_partition
